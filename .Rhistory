df <- rbind(df, newrow)
}
View(df)
df <- data.frame(n, p)
df <- data.frame(n, p)
?"data.frame"
df <- data.frame(n <- c(), p <- c())
View(df)
for(n in 90:1000){
newrow <- c(n, (factorial(k) * Stirling1(n, k) / k^n))
df <- rbind(df, newrow)
}
View(df)
k <- 90
n <- k
df <- data.frame(n <- n, p <- (factorial(k) *
Stirling1(n, k) / k^n))
View(df)
df <- data.frame("n" <- n, "p" <- (factorial(k) *
Stirling1(n, k) / k^n))
View(df)
for(n in k+1:1000){
newrow <- c(n, (factorial(k) * Stirling1(n, k) / k^n))
df <- rbind(df, newrow)
}
View(df)
df <- data.frame("n" <- c(n), "p" <- c((factorial(k) *
Stirling1(n, k) / k^n)))
View(df)
n <- k
df <- data.frame("n" <- c(n), "p" <- c((factorial(k) *
Stirling1(n, k) / k^n)))
View(df)
df <- data.frame()
for(n in k+1:1000){
newrow <- c(n, (factorial(k) * Stirling1(n, k) / k^n))
df <- rbind(df, newrow)
}
View(df)
plot(df$X91, df$X.8.87403908353652e.37)
install.packages("installr")
library("installr", lib.loc="~/R/win-library/3.2")
updateR()
library("installr")
install.packages("plyr")
library(ggplot2)
library(plyr)
library(dplyr)
library(gridExtra)
getplayerinfo <- function(player, players){
if(is.numeric(player)){players[players$account_id == player,]}
else{return(players[pmatch(tolower(player), tolower(players$name)),])}
}
densityplot <- function(x, playerinfo, stat = "total", xlim, title){
ID <- playerinfo[[1]]
#print(ID)
playerName <- playerinfo[[2]]
if(missing(title)){title <- playerName}
#print(playerName)
position <- playerinfo[[3]]
#print(position)
playerdata <- filter(x, playerID == ID)
p <- ggplot(playerdata, aes_string(stat)) + stat_density(geom="step")
p <- p + labs(title = title, x = paste(stat, "points", sep = " ")) + geom_vline(aes(xintercept = mean(playerdata[,stat])))
if(!missing(xlim)){return(p + xlim(xlim))}
else{return(p)}
}
teamdensity <- function(x, team, stat = "total", xlim){
plots <- list()
if(missing(xlim)){
for(i in seq(1:5)){
plots[[i]] <- densityplot(x, team[i,], stat = stat)
}
}else{
for(i in seq(1:5)){
plots[[i]] <- densityplot(x, team[i,], stat = stat, xlim = xlim)
}
}
arrangeGrob(plots[[1]], plots[[2]], plots[[3]], plots[[4]], plots[[5]], ncol=1)
}
cardscores <- function(card, data, players){
ID <- getplayerinfo(card$player, players)$account_id
playerdata <- filter(data, playerID == ID)
#print(summary(playerdata))
for(i in seq(2, length(card), 1)){
#print(card[[i]])
playerdata[,names(card)[i]] <- playerdata[,names(card)[[i]]] * (1 + (card[[i]]/100))
}
playerdata$total <- rowSums(playerdata[3:14])
return(playerdata)
}
comparecards <- function(cardA, cardB, data, players){
scoresA <- cardscores(cardA, data, players)
scoresB <- cardscores(cardB, data, players)
#print(summary(scoresA))
#print(summary(scoresB))
meanDiff <- mean(scoresA$total) - mean(scoresB$total)
if(meanDiff > 0){
print(paste("Card A is better by", round(meanDiff, 2), "points.", sep=" "))
}else if(meanDiff < 0){
print(paste("Card B is better by", round((-1 * meanDiff), 2), "points.", sep=" "))
}else{
print("It's a tie!")
}
maxscore <- max(c(scoresA$total, scoresB$total))
plotA <- densityplot(scoresA, getplayerinfo(cardA$player, players), title = "CardA")
plotB <- densityplot(scoresB, getplayerinfo(cardB$player, players), title = "CardB")
grid.arrange(plotA, plotB, ncol = 2)
}
testcardA <- list(player = "SumaiL", deaths = 5, GPM = 5, rosh = 10, teamfight = 20, firstblood = 15)
testcardB <- list(player = "Matumbaman", kills = 5, deaths = 5, CS = 10, GPM = 15, firstblood = 15)
rawdata <- read.csv("dota_fantasy_raw.csv")
players <- read.csv("playerdata.csv", stringsAsFactors = FALSE)
teams <- unique(players[,c("team_id", "team_name")])
fantasydata <- data.frame("matchID" = rawdata$match_id,
"playerID" = rawdata$account_id,
"kills" = rawdata$kills * 0.3,
"deaths" = 3 - (rawdata$deaths * 0.3),
"CS" = (rawdata$lasthits + rawdata$denies) * 0.003,
"GPM" = rawdata$gpm * 0.002,
"towerkills" = rawdata$towerkills,
"roshkills" = rawdata$roshkills,
"teamfight" = rawdata$teamfight * 3,
"wards" = rawdata$wards * 0.5,
"stacks" = rawdata$stacks * 0.5,
"runes" = rawdata$runes * 0.25,
"firstblood" = rawdata$firstblood * 4,
"stuns" = rawdata$stuns * 0.05)
fantasydata$total <- rowSums(fantasydata[3:14])
setwd("~/GitHub/fantasy_dota")
rawdata <- read.csv("dota_fantasy_raw.csv")
players <- read.csv("playerdata.csv", stringsAsFactors = FALSE)
teams <- unique(players[,c("team_id", "team_name")])
fantasydata <- data.frame("matchID" = rawdata$match_id,
"playerID" = rawdata$account_id,
"kills" = rawdata$kills * 0.3,
"deaths" = 3 - (rawdata$deaths * 0.3),
"CS" = (rawdata$lasthits + rawdata$denies) * 0.003,
"GPM" = rawdata$gpm * 0.002,
"towerkills" = rawdata$towerkills,
"roshkills" = rawdata$roshkills,
"teamfight" = rawdata$teamfight * 3,
"wards" = rawdata$wards * 0.5,
"stacks" = rawdata$stacks * 0.5,
"runes" = rawdata$runes * 0.25,
"firstblood" = rawdata$firstblood * 4,
"stuns" = rawdata$stuns * 0.05)
fantasydata$total <- rowSums(fantasydata[3:14])
comparecards(testcardA, testcardB, fantasydata, players)
cardscores(testcardA, fantasydata, players)
cardscores <- function(card, data, players){
ID <- getplayerinfo(card$player, players)$account_id
playerdata <- filter(data, playerID == ID)
#print(summary(playerdata))
for(i in seq(2, length(card), 1)){
#print(card[[i]])
playerdata[,names(card)[[i]]] <- playerdata[,names(card)[[i]]] * (1 + (card[[i]]/100))
}
playerdata$total <- rowSums(playerdata[3:14])
return(playerdata)
}
cardscores(testcardA, fantasydata, players)
cardscores <- function(card, data, players){
ID <- getplayerinfo(card$player, players)$account_id
playerdata <- filter(data, playerID == ID)
#print(summary(playerdata))
for(i in seq(2, length(card), 1)){
print(card[[i]])
#playerdata[,names(card)[i]] <- playerdata[,names(card)[[i]]] * (1 + (card[[i]]/100))
}
playerdata$total <- rowSums(playerdata[3:14])
return(playerdata)
}
cardscores(testcardA, fantasydata, players)
cardscores <- function(card, data, players){
ID <- getplayerinfo(card$player, players)$account_id
playerdata <- filter(data, playerID == ID)
#print(summary(playerdata))
for(i in seq(2, length(card), 1)){
print(names(card)[[i]])
#playerdata[,names(card)[i]] <- playerdata[,names(card)[[i]]] * (1 + (card[[i]]/100))
}
playerdata$total <- rowSums(playerdata[3:14])
return(playerdata)
}
cardscores(testcardA, fantasydata, players)
cardscores <- function(card, data, players){
ID <- getplayerinfo(card$player, players)$account_id
playerdata <- filter(data, playerID == ID)
#print(summary(playerdata))
for(i in seq(2, length(card), 1)){
print(names(card)[[i]])
#playerdata[,names(card)[i]] <- playerdata[,names(card)[[i]]] * (1 + (card[[i]]/100))
}
playerdata$total <- rowSums(playerdata[3:14])
#return(playerdata)
}
cardscores(testcardA, fantasydata, players)
cardscores <- function(card, data, players){
ID <- getplayerinfo(card$player, players)$account_id
playerdata <- filter(data, playerID == ID)
#print(summary(playerdata))
for(i in seq(2, length(card), 1)){
#print(names(card)[[i]])
playerdata[,names(card)[[i]]] <- playerdata[,names(card)[[i]]] * (1 + (card[[i]]/100))
}
playerdata$total <- rowSums(playerdata[3:14])
#return(playerdata)
}
cardscores(testcardA, fantasydata, players)
cardscores <- function(card, data, players){
ID <- getplayerinfo(card$player, players)$account_id
playerdata <- filter(data, playerID == ID)
#print(summary(playerdata))
for(i in seq(2, length(card), 1)){
#print(names(card)[[i]])
playerdata[,names(card)[i,]] <- playerdata[,names(card)[[i]]] * (1 + (card[[i]]/100))
}
playerdata$total <- rowSums(playerdata[3:14])
#return(playerdata)
}
cardscores(testcardA, fantasydata, players)
cardscores <- function(card, data, players){
ID <- getplayerinfo(card$player, players)$account_id
playerdata <- filter(data, playerID == ID)
#print(summary(playerdata))
for(i in seq(2, length(card), 1)){
#print(names(card)[[i]])
playerdata[,names(card)[i]] <- playerdata[,names(card)[[i]]] * (1 + (card[[i]]/100))
}
playerdata$total <- rowSums(playerdata[3:14])
#return(playerdata)
}
cardscores(testcardA, fantasydata, players)
View(fantasydata)
testcardA <- list(player = "SumaiL", deaths = 5, GPM = 5, roshkills = 10, teamfight = 20, firstblood = 15)
cardscores <- function(card, data, players){
ID <- getplayerinfo(card$player, players)$account_id
playerdata <- filter(data, playerID == ID)
#print(summary(playerdata))
for(i in seq(2, length(card), 1)){
#print(names(card)[[i]])
playerdata[,names(card)[i]] <- playerdata[,names(card)[[i]]] * (1 + (card[[i]]/100))
}
playerdata$total <- rowSums(playerdata[3:14])
#return(playerdata)
}
cardscores(testcardA, fantasydata, players)
cardscores <- function(card, data, players){
ID <- getplayerinfo(card$player, players)$account_id
playerdata <- filter(data, playerID == ID)
#print(summary(playerdata))
for(i in seq(2, length(card), 1)){
#print(names(card)[[i]])
playerdata[,names(card)[i]] <- playerdata[,names(card)[[i]]] * (1 + (card[[i]]/100))
}
playerdata$total <- rowSums(playerdata[3:14])
return(playerdata)
}
comparecards(testcardA, testcardB, fantasydata, players)
?round_any
comparecards <- function(cardA, cardB, data, players){
scoresA <- cardscores(cardA, data, players)
scoresB <- cardscores(cardB, data, players)
#print(summary(scoresA))
#print(summary(scoresB))
meanDiff <- mean(scoresA$total) - mean(scoresB$total)
if(meanDiff > 0){
print(paste("Card A is better by", round(meanDiff, 2), "points.", sep=" "))
}else if(meanDiff < 0){
print(paste("Card B is better by", round((-1 * meanDiff), 2), "points.", sep=" "))
}else{
print("It's a tie!")
}
maxscore <- max(c(scoresA$total, scoresB$total))
lim <- c(0, round_any(maxscore, 5, "ceiling"))
plotA <- densityplot(scoresA, getplayerinfo(cardA$player, players), title = "CardA", xlim = lim)
plotB <- densityplot(scoresB, getplayerinfo(cardB$player, players), title = "CardB", xlim = lim)
grid.arrange(plotA, plotB, ncol = 2)
}
comparecards(testcardA, testcardB, fantasydata, players)
comparecards <- function(cardA, cardB, data, players){
scoresA <- cardscores(cardA, data, players)
scoresB <- cardscores(cardB, data, players)
#print(summary(scoresA))
#print(summary(scoresB))
meanDiff <- mean(scoresA$total) - mean(scoresB$total)
if(meanDiff > 0){
print(paste("Card A is better by", round(meanDiff, 2), "points.", sep=" "))
}else if(meanDiff < 0){
print(paste("Card B is better by", round((-1 * meanDiff), 2), "points.", sep=" "))
}else{
print("It's a tie!")
}
maxscore <- max(c(scoresA$total, scoresB$total))
lim <- c(0, round_any(maxscore, 5, ceiling))
plotA <- densityplot(scoresA, getplayerinfo(cardA$player, players), title = "CardA", xlim = lim)
plotB <- densityplot(scoresB, getplayerinfo(cardB$player, players), title = "CardB", xlim = lim)
grid.arrange(plotA, plotB, ncol = 2)
}
comparecards(testcardA, testcardB, fantasydata, players)
?wilcox.test
?Wilcoxon
?wilcox.test
comparecards <- function(cardA, cardB, data, players){
scoresA <- cardscores(cardA, data, players)
scoresB <- cardscores(cardB, data, players)
#print(summary(scoresA))
#print(summary(scoresB))
meanDiff <- mean(scoresA$total) - mean(scoresB$total)
if(meanDiff > 0){
print(paste("Card A is better by", round(meanDiff, 2), "points.", sep=" "))
}else if(meanDiff < 0){
print(paste("Card B is better by", round((-1 * meanDiff), 2), "points.", sep=" "))
}else{
print("It's a tie!")
}
wilcox.test(scoresA$total, scoresB$total)
maxscore <- max(c(scoresA$total, scoresB$total))
lim <- c(0, round_any(maxscore, 5, ceiling))
plotA <- densityplot(scoresA, getplayerinfo(cardA$player, players), title = "CardA", xlim = lim)
plotB <- densityplot(scoresB, getplayerinfo(cardB$player, players), title = "CardB", xlim = lim)
grid.arrange(plotA, plotB, ncol = 2)
}
comparecards(testcardA, testcardB, fantasydata, players)
comparecards <- function(cardA, cardB, data, players){
scoresA <- cardscores(cardA, data, players)
scoresB <- cardscores(cardB, data, players)
#print(summary(scoresA))
#print(summary(scoresB))
meanDiff <- mean(scoresA$total) - mean(scoresB$total)
if(meanDiff > 0){
print(paste("Card A is better by", round(meanDiff, 2), "points.", sep=" "))
}else if(meanDiff < 0){
print(paste("Card B is better by", round((-1 * meanDiff), 2), "points.", sep=" "))
}else{
print("It's a tie!")
}
print(wilcox.test(scoresA$total, scoresB$total))
maxscore <- max(c(scoresA$total, scoresB$total))
lim <- c(0, round_any(maxscore, 5, ceiling))
plotA <- densityplot(scoresA, getplayerinfo(cardA$player, players), title = "CardA", xlim = lim)
plotB <- densityplot(scoresB, getplayerinfo(cardB$player, players), title = "CardB", xlim = lim)
grid.arrange(plotA, plotB, ncol = 2)
}
comparecards(testcardA, testcardB, fantasydata, players)
comparecards <- function(cardA, cardB, data, players){
scoresA <- cardscores(cardA, data, players)
scoresB <- cardscores(cardB, data, players)
#print(summary(scoresA))
#print(summary(scoresB))
meanDiff <- mean(scoresA$total) - mean(scoresB$total)
mannwhitney <- wilcox.test(scoresA$total, scoresB$total)
if(meanDiff > 0){
print(paste("Card A is better by", round(meanDiff, 2),
"points, with a p-value of", mannwhitney$p.value, sep=" "))
}else if(meanDiff < 0){
print(paste("Card B is better by", round((-1 * meanDiff), 2), "points.",
"points, with a p-value of", mannwhitney$p.value, sep=" "))
}else{
print("It's a tie!")
}
maxscore <- max(c(scoresA$total, scoresB$total))
lim <- c(0, round_any(maxscore, 5, ceiling))
plotA <- densityplot(scoresA, getplayerinfo(cardA$player, players), title = "CardA", xlim = lim)
plotB <- densityplot(scoresB, getplayerinfo(cardB$player, players), title = "CardB", xlim = lim)
grid.arrange(plotA, plotB, ncol = 2)
}
comparecards(testcardA, testcardB, fantasydata, players)
comparecards <- function(cardA, cardB, data, players){
scoresA <- cardscores(cardA, data, players)
scoresB <- cardscores(cardB, data, players)
#print(summary(scoresA))
#print(summary(scoresB))
meanDiff <- mean(scoresA$total) - mean(scoresB$total)
mannwhitney <- wilcox.test(scoresA$total, scoresB$total)
if(meanDiff > 0){
print(paste("Card A is better by", round(meanDiff, 2),
"points, with a p-value of", round(mannwhitney$p.value, 2), sep=" "))
}else if(meanDiff < 0){
print(paste("Card B is better by", round((-1 * meanDiff), 2), "points.",
"points, with a p-value of", round(mannwhitney$p.value, 2), sep=" "))
}else{
print("It's a tie!")
}
maxscore <- max(c(scoresA$total, scoresB$total))
lim <- c(0, round_any(maxscore, 5, ceiling))
plotA <- densityplot(scoresA, getplayerinfo(cardA$player, players), title = "CardA", xlim = lim)
plotB <- densityplot(scoresB, getplayerinfo(cardB$player, players), title = "CardB", xlim = lim)
grid.arrange(plotA, plotB, ncol = 2)
}
comparecards(testcardA, testcardB, fantasydata, players)
comparecards <- function(cardA, cardB, data, players){
scoresA <- cardscores(cardA, data, players)
scoresB <- cardscores(cardB, data, players)
#print(summary(scoresA))
#print(summary(scoresB))
meanDiff <- mean(scoresA$total) - mean(scoresB$total)
mannwhitney <- wilcox.test(scoresA$total, scoresB$total)
if(meanDiff > 0){
print(paste("Card A is better by", round(meanDiff, 2),
"points, with a p-value of", round(mannwhitney$p.value, 2), sep=" "))
}else if(meanDiff < 0){
print(paste("Card B is better by", round((-1 * meanDiff), 2), "points.",
"points, with a p-value of", round(mannwhitney$p.value, 5), sep=" "))
}else{
print("It's a tie!")
}
maxscore <- max(c(scoresA$total, scoresB$total))
lim <- c(0, round_any(maxscore, 5, ceiling))
plotA <- densityplot(scoresA, getplayerinfo(cardA$player, players), title = "CardA", xlim = lim)
plotB <- densityplot(scoresB, getplayerinfo(cardB$player, players), title = "CardB", xlim = lim)
grid.arrange(plotA, plotB, ncol = 2)
}
comparecards(testcardA, testcardB, fantasydata, players)
comparecards <- function(cardA, cardB, data, players){
scoresA <- cardscores(cardA, data, players)
scoresB <- cardscores(cardB, data, players)
#print(summary(scoresA))
#print(summary(scoresB))
meanDiff <- mean(scoresA$total) - mean(scoresB$total)
mannwhitney <- wilcox.test(scoresA$total, scoresB$total)
if(meanDiff > 0){
print(paste("Card A is better by", round(meanDiff, 2),
"points, with a p-value of", round(mannwhitney$p.value, 5), sep=" "))
}else if(meanDiff < 0){
print(paste("Card B is better by", round((-1 * meanDiff), 2), "points.",
"points, with a p-value of", round(mannwhitney$p.value, 5), sep=" "))
}else{
print("It's a tie!")
}
maxscore <- max(c(scoresA$total, scoresB$total))
lim <- c(0, round_any(maxscore, 5, ceiling))
plotA <- densityplot(scoresA, getplayerinfo(cardA$player, players), title = "CardA", xlim = lim)
plotB <- densityplot(scoresB, getplayerinfo(cardB$player, players), title = "CardB", xlim = lim)
grid.arrange(plotA, plotB, ncol = 2)
}
comparecards <- function(cardA, cardB, data, players){
scoresA <- cardscores(cardA, data, players)
scoresB <- cardscores(cardB, data, players)
#print(summary(scoresA))
#print(summary(scoresB))
meanDiff <- mean(scoresA$total) - mean(scoresB$total)
mannwhitney <- wilcox.test(scoresA$total, scoresB$total)
if(meanDiff > 0){
print(paste("Card A is better by", round(meanDiff, 2),
"points, with a p-value of", round(mannwhitney$p.value, 5), sep=" "))
}else if(meanDiff < 0){
print(paste("Card B is better by", round((-1 * meanDiff), 2), "points.",
"points, with a p-value of", round(mannwhitney$p.value, 5), sep=" "))
}else{
print("It's a tie!")
}
maxscore <- max(c(scoresA$total, scoresB$total))
lim <- c(0, round_any(maxscore, 5, ceiling))
plotA <- densityplot(scoresA, getplayerinfo(cardA$player, players), title = "CardA", xlim = lim)
plotB <- densityplot(scoresB, getplayerinfo(cardB$player, players), title = "CardB", xlim = lim)
grid.arrange(plotA, plotB, ncol = 2)
}
comparecards(testcardA, testcardB, fantasydata, players)
??round
?format
?scipen
??scipen
comparecards <- function(cardA, cardB, data, players){
scoresA <- cardscores(cardA, data, players)
scoresB <- cardscores(cardB, data, players)
#print(summary(scoresA))
#print(summary(scoresB))
meanDiff <- mean(scoresA$total) - mean(scoresB$total)
mannwhitney <- wilcox.test(scoresA$total, scoresB$total)
if(meanDiff > 0){
print(paste("Card A is better by", round(meanDiff, 2),
"points, with a p-value of", scientific(mannwhitney$p.value, 3), sep=" "))
}else if(meanDiff < 0){
print(paste("Card B is better by", round((-1 * meanDiff), 2), "points.",
"points, with a p-value of", scientific(mannwhitney$p.value, 3), sep=" "))
}else{
print("It's a tie!")
}
maxscore <- max(c(scoresA$total, scoresB$total))
lim <- c(0, round_any(maxscore, 5, ceiling))
plotA <- densityplot(scoresA, getplayerinfo(cardA$player, players), title = "CardA", xlim = lim)
plotB <- densityplot(scoresB, getplayerinfo(cardB$player, players), title = "CardB", xlim = lim)
grid.arrange(plotA, plotB, ncol = 2)
}
comparecards(testcardA, testcardB, fantasydata, players)
library(scales)
comparecards <- function(cardA, cardB, data, players){
scoresA <- cardscores(cardA, data, players)
scoresB <- cardscores(cardB, data, players)
#print(summary(scoresA))
#print(summary(scoresB))
meanDiff <- mean(scoresA$total) - mean(scoresB$total)
mannwhitney <- wilcox.test(scoresA$total, scoresB$total)
if(meanDiff > 0){
print(paste("Card A is better by", round(meanDiff, 2),
"points, with a p-value of", scientific(mannwhitney$p.value, 3), sep=" "))
}else if(meanDiff < 0){
print(paste("Card B is better by", round((-1 * meanDiff), 2), "points.",
"points, with a p-value of", scientific(mannwhitney$p.value, 3), sep=" "))
}else{
print("It's a tie!")
}
maxscore <- max(c(scoresA$total, scoresB$total))
lim <- c(0, round_any(maxscore, 5, ceiling))
plotA <- densityplot(scoresA, getplayerinfo(cardA$player, players), title = "CardA", xlim = lim)
plotB <- densityplot(scoresB, getplayerinfo(cardB$player, players), title = "CardB", xlim = lim)
grid.arrange(plotA, plotB, ncol = 2)
}
comparecards(testcardA, testcardB, fantasydata, players)
summary(fantasydata)
