)
)
server <- function(input, output) {
output$maintable <- renderTable({
inputcards <- input$usercards
if (is.null(inputcards))
return(NULL)
carddata <- importcards(inputcards$datapath, fantasydata, players)
summarytable <- sumtable(carddata, input$displayscore, players)
caption = paste("Showing ", input$displayscore, " points sorted by ", input$displaystat, ".", sep = "")
if(input$dec){
summarytable[order(summarytable[,input$displaystat], decreasing = T),]
}else{
summarytable[order(summarytable[,input$displaystat], decreasing = F),]
}
}, rownames = TRUE)
output$caption <- renderText({
if (is.null(input$usercards))
return(NULL)
paste("Showing ", input$displayscore, " points sorted by ", input$displaystat, ".", sep = "")
})
observeEvent(input$statdetails, {
showModal(modalDialog({<html> Min - minimum, the lowest value <br>
Mean - mean (average)
Med - median, the middle value
Max - maximum, the highest value
sd - standard deviation - higher values mean more variability
mad - median absolute deviation - more robust alternative to sd </html>},
title = "Overview of stats shown",
easyClose = T
))
})
}
shinyApp(ui, server)
if (interactive()) {
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("usercards", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"),
),
helpText("The input file should be in CSV format with one card per line."),
selectInput("displayscore", "Choose a score to display:",
c("kills", "deaths", "CS", "GPM", "towerkills", "roshkills",
"teamfight", "wards", "stacks", "runes", "firstblood", "stuns", "total"),
selected = "total"),
selectInput("displaystat", "Choose a statistic for sorting:",
c("min", "mean", "med", "max", "sd", "mad"),
selected = "mean"),
checkboxInput("dec", "Sort decreasing?", value = T),
actionButton("statdetails", "What do these stats mean?")
),
mainPanel(
tableOutput("maintable"),
textOutput("caption")
)
)
)
server <- function(input, output) {
output$maintable <- renderTable({
inputcards <- input$usercards
if (is.null(inputcards))
return(NULL)
carddata <- importcards(inputcards$datapath, fantasydata, players)
summarytable <- sumtable(carddata, input$displayscore, players)
caption = paste("Showing ", input$displayscore, " points sorted by ", input$displaystat, ".", sep = "")
if(input$dec){
summarytable[order(summarytable[,input$displaystat], decreasing = T),]
}else{
summarytable[order(summarytable[,input$displaystat], decreasing = F),]
}
}, rownames = TRUE)
output$caption <- renderText({
if (is.null(input$usercards))
return(NULL)
paste("Showing ", input$displayscore, " points sorted by ", input$displaystat, ".", sep = "")
})
observeEvent(input$statdetails, {
showModal(modalDialog({Min - minimum, the lowest value <br>
Mean - mean (average)
Med - median, the middle value
Max - maximum, the highest value
sd - standard deviation - higher values mean more variability
mad - median absolute deviation - more robust alternative to sd},
title = "Overview of stats shown",
easyClose = T
))
})
}
shinyApp(ui, server)
if (interactive()) {
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("usercards", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"),
),
helpText("The input file should be in CSV format with one card per line."),
selectInput("displayscore", "Choose a score to display:",
c("kills", "deaths", "CS", "GPM", "towerkills", "roshkills",
"teamfight", "wards", "stacks", "runes", "firstblood", "stuns", "total"),
selected = "total"),
selectInput("displaystat", "Choose a statistic for sorting:",
c("min", "mean", "med", "max", "sd", "mad"),
selected = "mean"),
checkboxInput("dec", "Sort decreasing?", value = T),
actionButton("statdetails", "What do these stats mean?")
),
mainPanel(
tableOutput("maintable"),
textOutput("caption")
)
)
)
server <- function(input, output) {
output$maintable <- renderTable({
inputcards <- input$usercards
if (is.null(inputcards))
return(NULL)
carddata <- importcards(inputcards$datapath, fantasydata, players)
summarytable <- sumtable(carddata, input$displayscore, players)
caption = paste("Showing ", input$displayscore, " points sorted by ", input$displaystat, ".", sep = "")
if(input$dec){
summarytable[order(summarytable[,input$displaystat], decreasing = T),]
}else{
summarytable[order(summarytable[,input$displaystat], decreasing = F),]
}
}, rownames = TRUE)
output$caption <- renderText({
if (is.null(input$usercards))
return(NULL)
paste("Showing ", input$displayscore, " points sorted by ", input$displaystat, ".", sep = "")
})
observeEvent(input$statdetails, {
showModal(modalDialog("<p>Min - minimum, the lowest value
Mean - mean (average)
Med - median, the middle value
Max - maximum, the highest value
sd - standard deviation - higher values mean more variability
mad - median absolute deviation - more robust alternative to sd</p>",
title = "Overview of stats shown",
easyClose = T
))
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("usercards", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"),
),
helpText("The input file should be in CSV format with one card per line."),
selectInput("displayscore", "Choose a score to display:",
c("kills", "deaths", "CS", "GPM", "towerkills", "roshkills",
"teamfight", "wards", "stacks", "runes", "firstblood", "stuns", "total"),
selected = "total"),
selectInput("displaystat", "Choose a statistic for sorting:",
c("min", "mean", "med", "max", "sd", "mad"),
selected = "mean"),
checkboxInput("dec", "Sort decreasing?", value = T),
actionButton("statdetails", "What do these stats mean?")
),
mainPanel(
tableOutput("maintable"),
textOutput("caption")
)
)
)
server <- function(input, output) {
output$maintable <- renderTable({
inputcards <- input$usercards
if (is.null(inputcards))
return(NULL)
carddata <- importcards(inputcards$datapath, fantasydata, players)
summarytable <- sumtable(carddata, input$displayscore, players)
caption = paste("Showing ", input$displayscore, " points sorted by ", input$displaystat, ".", sep = "")
if(input$dec){
summarytable[order(summarytable[,input$displaystat], decreasing = T),]
}else{
summarytable[order(summarytable[,input$displaystat], decreasing = F),]
}
}, rownames = TRUE)
output$caption <- renderText({
if (is.null(input$usercards))
return(NULL)
paste("Showing ", input$displayscore, " points sorted by ", input$displaystat, ".", sep = "")
})
observeEvent(input$statdetails, {
showModal(modalDialog(<p>Min - minimum, the lowest value
Mean - mean (average)
Med - median, the middle value
Max - maximum, the highest value
sd - standard deviation - higher values mean more variability
mad - median absolute deviation - more robust alternative to sd</p>,
title = "Overview of stats shown",
easyClose = T
))
})
}
shinyApp(ui, server)
if (interactive()) {
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("usercards", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"),
),
helpText("The input file should be in CSV format with one card per line."),
selectInput("displayscore", "Choose a score to display:",
c("kills", "deaths", "CS", "GPM", "towerkills", "roshkills",
"teamfight", "wards", "stacks", "runes", "firstblood", "stuns", "total"),
selected = "total"),
selectInput("displaystat", "Choose a statistic for sorting:",
c("min", "mean", "med", "max", "sd", "mad"),
selected = "mean"),
checkboxInput("dec", "Sort decreasing?", value = T),
actionButton("statdetails", "What do these stats mean?")
),
mainPanel(
tableOutput("maintable"),
textOutput("caption")
)
)
)
server <- function(input, output) {
output$maintable <- renderTable({
inputcards <- input$usercards
if (is.null(inputcards))
return(NULL)
carddata <- importcards(inputcards$datapath, fantasydata, players)
summarytable <- sumtable(carddata, input$displayscore, players)
caption = paste("Showing ", input$displayscore, " points sorted by ", input$displaystat, ".", sep = "")
if(input$dec){
summarytable[order(summarytable[,input$displaystat], decreasing = T),]
}else{
summarytable[order(summarytable[,input$displaystat], decreasing = F),]
}
}, rownames = TRUE)
output$caption <- renderText({
if (is.null(input$usercards))
return(NULL)
paste("Showing ", input$displayscore, " points sorted by ", input$displaystat, ".", sep = "")
})
observeEvent(input$statdetails, {
showModal(modalDialog(<p>"Min - minimum, the lowest value
Mean - mean (average)
Med - median, the middle value
Max - maximum, the highest value
sd - standard deviation - higher values mean more variability
mad - median absolute deviation - more robust alternative to sd"</p>,
title = "Overview of stats shown",
easyClose = T
))
})
}
shinyApp(ui, server)
if (interactive()) {
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("usercards", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"),
),
helpText("The input file should be in CSV format with one card per line."),
selectInput("displayscore", "Choose a score to display:",
c("kills", "deaths", "CS", "GPM", "towerkills", "roshkills",
"teamfight", "wards", "stacks", "runes", "firstblood", "stuns", "total"),
selected = "total"),
selectInput("displaystat", "Choose a statistic for sorting:",
c("min", "mean", "med", "max", "sd", "mad"),
selected = "mean"),
checkboxInput("dec", "Sort decreasing?", value = T),
actionButton("statdetails", "What do these stats mean?")
),
mainPanel(
tableOutput("maintable"),
textOutput("caption")
)
)
)
server <- function(input, output) {
output$maintable <- renderTable({
inputcards <- input$usercards
if (is.null(inputcards))
return(NULL)
carddata <- importcards(inputcards$datapath, fantasydata, players)
summarytable <- sumtable(carddata, input$displayscore, players)
caption = paste("Showing ", input$displayscore, " points sorted by ", input$displaystat, ".", sep = "")
if(input$dec){
summarytable[order(summarytable[,input$displaystat], decreasing = T),]
}else{
summarytable[order(summarytable[,input$displaystat], decreasing = F),]
}
}, rownames = TRUE)
output$caption <- renderText({
if (is.null(input$usercards))
return(NULL)
paste("Showing ", input$displayscore, " points sorted by ", input$displaystat, ".", sep = "")
})
observeEvent(input$statdetails, {
showModal(modalDialog(HTML("Min - minimum, the lowest value <br>
Mean - mean (average) <br>
Med - median, the middle value <br>
Max - maximum, the highest value <br>
sd - standard deviation - higher values mean more variability <br>
mad - median absolute deviation - more robust alternative to sd"),
title = "Overview of stats shown",
easyClose = T
))
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("usercards", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"),
),
helpText("The input file should be in CSV format with one card per line."),
selectInput("displayscore", "Choose a score to display:",
c("kills", "deaths", "CS", "GPM", "towerkills", "roshkills",
"teamfight", "wards", "stacks", "runes", "firstblood", "stuns", "total"),
selected = "total"),
selectInput("displaystat", "Choose a statistic for sorting:",
c("min", "mean", "med", "max", "sd", "mad"),
selected = "mean"),
checkboxInput("dec", "Sort decreasing?", value = T),
actionButton("statdetails", "What do these stats mean?")
),
mainPanel(
tableOutput("maintable"),
textOutput("caption")
)
)
)
server <- function(input, output) {
output$maintable <- renderTable({
inputcards <- input$usercards
if (is.null(inputcards))
return(NULL)
carddata <- importcards(inputcards$datapath, fantasydata, players)
summarytable <- sumtable(carddata, input$displayscore, players)
caption = paste("Showing ", input$displayscore, " points sorted by ", input$displaystat, ".", sep = "")
if(input$dec){
summarytable[order(summarytable[,input$displaystat], decreasing = T),]
}else{
summarytable[order(summarytable[,input$displaystat], decreasing = F),]
}
}, rownames = TRUE)
output$caption <- renderText({
if (is.null(input$usercards))
return(NULL)
paste("Showing ", input$displayscore, " points sorted by ", input$displaystat, ".", sep = "")
})
observeEvent(input$statdetails, {
showModal(modalDialog(HTML("min - minimum, the lowest value <br>
mean - mean, the \"default\" average <br>
med - median, the middle value <br>
max - maximum, the highest value <br>
sd - standard deviation, higher values mean more variability <br>
mad - median absolute deviation, more robust alternative to sd"),
title = "Overview of stats shown",
easyClose = T
))
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("usercards", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"),
),
helpText("The input file should be in CSV format with one card per line."),
selectInput("displayscore", "Choose a score to display:",
c("kills", "deaths", "CS", "GPM", "towerkills", "roshkills",
"teamfight", "wards", "stacks", "runes", "firstblood", "stuns", "total"),
selected = "total"),
selectInput("displaystat", "Choose a statistic for sorting:",
c("min", "mean", "med", "max", "sd", "mad"),
selected = "mean"),
checkboxInput("dec", "Sort decreasing?", value = T),
actionButton("statdetails", "What do these stats mean?")
),
mainPanel(
tableOutput("maintable"),
textOutput("caption")
)
)
)
server <- function(input, output) {
output$maintable <- renderTable({
inputcards <- input$usercards
if (is.null(inputcards))
return(NULL)
carddata <- importcards(inputcards$datapath, fantasydata, players)
summarytable <- sumtable(carddata, input$displayscore, players)
caption = paste("Showing ", input$displayscore, " points sorted by ", input$displaystat, ".", sep = "")
if(input$dec){
summarytable[order(summarytable[,input$displaystat], decreasing = T),]
}else{
summarytable[order(summarytable[,input$displaystat], decreasing = F),]
}
}, rownames = TRUE)
output$caption <- renderText({
if (is.null(input$usercards))
return(NULL)
paste("Showing ", input$displayscore, " points sorted by ", input$displaystat, ".", sep = "")
})
observeEvent(input$statdetails, {
showModal(modalDialog(HTML("min - minimum, the lowest value <br>
mean - mean, your \"standard\" average, skewed by extreme values <br>
med - median, the middle value when ranked low-high, more robust to extreme values <br>
max - maximum, the highest value <br>
sd - standard deviation, measure of variability around the mean, skewed by extreme values <br>
mad - median absolute deviation, measure of variability around the median, more robust to extreme values"),
title = "Overview of stats shown",
easyClose = T
))
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("usercards", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
),
helpText("The input file should be in CSV format with one card per line."),
selectInput("displayscore", "Choose a score to display:",
c("kills", "deaths", "CS", "GPM", "towerkills", "roshkills",
"teamfight", "wards", "stacks", "runes", "firstblood", "stuns", "total"),
selected = "total"),
selectInput("displaystat", "Choose a statistic for sorting:",
c("min", "mean", "med", "max", "sd", "mad"),
selected = "mean"),
checkboxInput("dec", "Sort decreasing?", value = T),
actionButton("statdetails", "What do these stats mean?")
),
mainPanel(
tableOutput("maintable"),
textOutput("caption")
)
)
)
server <- function(input, output) {
output$maintable <- renderTable({
inputcards <- input$usercards
if (is.null(inputcards))
return(NULL)
carddata <- importcards(inputcards$datapath, fantasydata, players)
summarytable <- sumtable(carddata, input$displayscore, players)
caption = paste("Showing ", input$displayscore, " points sorted by ", input$displaystat, ".", sep = "")
if(input$dec){
summarytable[order(summarytable[,input$displaystat], decreasing = T),]
}else{
summarytable[order(summarytable[,input$displaystat], decreasing = F),]
}
}, rownames = TRUE)
output$caption <- renderText({
if (is.null(input$usercards))
return(NULL)
paste("Showing ", input$displayscore, " points sorted by ", input$displaystat, ".", sep = "")
})
observeEvent(input$statdetails, {
showModal(modalDialog(HTML("min - minimum, the lowest value <br>
mean - your \"standard\" average, skewed by extreme values <br>
med - median, the middle value when ranked low-high, more robust to extreme values <br>
max - maximum, the highest value <br>
sd - standard deviation, measure of variability around the mean, skewed by extreme values <br>
mad - median absolute deviation, measure of variability around the median, more robust to extreme values"),
title = "Overview of stats shown",
easyClose = T
))
})
}
shinyApp(ui, server)
}
runApp()
