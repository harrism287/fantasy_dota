?t.test
?stirling
??stirling
install.packages("stirling")
install.packages("copula")
??factorial
k <- 90
install.packages("dplyr")
library(dplyr)
library(copula)
library("dplyr", lib.loc="~/R/win-library/3.2")
k90 <- data.frame()
rm(k90)
df <- data.frame()
for(n in 1:1000){
newrow <- c(n, (factorial(k) * Stirling1(n, k) / k^n))
df <- rbind(df, newrow)
}
for(n in 90:1000){
newrow <- c(n, (factorial(k) * Stirling1(n, k) / k^n))
df <- rbind(df, newrow)
}
View(df)
df <- data.frame(n, p)
df <- data.frame(n, p)
?"data.frame"
df <- data.frame(n <- c(), p <- c())
View(df)
for(n in 90:1000){
newrow <- c(n, (factorial(k) * Stirling1(n, k) / k^n))
df <- rbind(df, newrow)
}
View(df)
k <- 90
n <- k
df <- data.frame(n <- n, p <- (factorial(k) *
Stirling1(n, k) / k^n))
View(df)
df <- data.frame("n" <- n, "p" <- (factorial(k) *
Stirling1(n, k) / k^n))
View(df)
for(n in k+1:1000){
newrow <- c(n, (factorial(k) * Stirling1(n, k) / k^n))
df <- rbind(df, newrow)
}
View(df)
df <- data.frame("n" <- c(n), "p" <- c((factorial(k) *
Stirling1(n, k) / k^n)))
View(df)
n <- k
df <- data.frame("n" <- c(n), "p" <- c((factorial(k) *
Stirling1(n, k) / k^n)))
View(df)
df <- data.frame()
for(n in k+1:1000){
newrow <- c(n, (factorial(k) * Stirling1(n, k) / k^n))
df <- rbind(df, newrow)
}
View(df)
plot(df$X91, df$X.8.87403908353652e.37)
install.packages("installr")
library("installr", lib.loc="~/R/win-library/3.2")
updateR()
library("installr")
setwd("~/GitHub/fantasy_dota")
source("functions.R")
rawdata <- read.csv("dota_fantasy_raw.csv")
players <- read.csv("playerdata.csv", stringsAsFactors = FALSE)
teams <- unique(players[,c("team_id", "team_name")])
fantasydata <- data.frame("matchID" = rawdata$match_id,
"playerID" = rawdata$account_id,
"kills" = rawdata$kills * 0.3,
"deaths" = 3 - (rawdata$deaths * 0.3),
"CS" = (rawdata$lasthits + rawdata$denies) * 0.003,
"GPM" = rawdata$gpm * 0.002,
"towerkills" = rawdata$towerkills,
"roshkills" = rawdata$roshkills,
"teamfight" = rawdata$teamfight * 3,
"wards" = rawdata$wards * 0.5,
"stacks" = rawdata$stacks * 0.5,
"runes" = rawdata$runes * 0.25,
"firstblood" = rawdata$firstblood * 4,
"stuns" = rawdata$stuns * 0.05)
fantasydata$total <- rowSums(fantasydata[3:14])
testcardA <- list(player = "SumaiL", deaths = 5, GPM = 5, roshkills = 10, teamfight = 20, firstblood = 15)
testcardB <- list(player = "Matumbaman", kills = 5, deaths = 5, CS = 10, GPM = 15, firstblood = 15)
testcardC <- list(player = "BurNing", kills =10, teamfight = 20, runes = 5)
comparecards(testcardB, testcardC, fantasydata, players)
card_sumail <- list(player = "SumaiL", deaths = 5, GPM = 5, roshkills = 10, teamfight = 20, firstblood = 15)
card_matumba <- list(player = "Matumbaman", kills = 5, deaths = 5, CS = 10, GPM = 15, firstblood = 15)
card_burning  <- list(player = "BurNing", kills =10, teamfight = 20, runes = 5)
card_sumail <- list(player = "SumaiL", deaths = 5, GPM = 5, roshkills = 10, teamfight = 20, firstblood = 15)
card_matumba <- list(player = "Matumbaman", kills = 5, deaths = 5, CS = 10, GPM = 15, firstblood = 15)
card_burning  <- list(player = "BurNing", kills =10, teamfight = 20, runes = 5)
card_Moogy <- list(player = "Moogy", GPM = 20, towerkills = 5, teamfight = 10, wards = 20, firstblood = 20)
card_rtz <- list(player = "Arteezy", kills = 5, deaths = 20, towerkills = 20)
card_op <- list(player = "op", deaths = 20, towerkills = 10, runes = 20)
card_sccc <- list(player = "sccc", kills = 10, deaths = 10, towerkills = 15)
card_miracle <- list(player = "miracle", CS = 20, GPM = 15, roshkills = 15)
rm(testcardA)
rm(testcardB)
rm(testcardC)
comparecards(card_sumail, card_matumba, fantasydata, players)
setwd("~/GitHub/fantasy_dota")
source("functions.R")
rawdata <- read.csv("dota_fantasy_raw.csv")
players <- read.csv("playerdata.csv", stringsAsFactors = FALSE)
teams <- unique(players[,c("team_id", "team_name")])
fantasydata <- data.frame("matchID" = rawdata$match_id,
"playerID" = rawdata$account_id,
"kills" = rawdata$kills * 0.3,
"deaths" = 3 - (rawdata$deaths * 0.3),
"CS" = (rawdata$lasthits + rawdata$denies) * 0.003,
"GPM" = rawdata$gpm * 0.002,
"towerkills" = rawdata$towerkills,
"roshkills" = rawdata$roshkills,
"teamfight" = rawdata$teamfight * 3,
"wards" = rawdata$wards * 0.5,
"stacks" = rawdata$stacks * 0.5,
"runes" = rawdata$runes * 0.25,
"firstblood" = rawdata$firstblood * 4,
"stuns" = rawdata$stuns * 0.05)
fantasydata$total <- rowSums(fantasydata[3:14])
card_sumail <- list(player = "SumaiL", deaths = 5, GPM = 5, roshkills = 10, teamfight = 20, firstblood = 15)
card_matumba <- list(player = "Matumbaman", kills = 5, deaths = 5, CS = 10, GPM = 15, firstblood = 15)
card_burning  <- list(player = "BurNing", kills =10, teamfight = 20, runes = 5)
card_Moogy <- list(player = "Moogy", GPM = 20, towerkills = 5, teamfight = 10, wards = 20, firstblood = 20)
card_rtz <- list(player = "Arteezy", kills = 5, deaths = 20, towerkills = 20)
card_op <- list(player = "op", deaths = 20, towerkills = 10, runes = 20)
card_sccc <- list(player = "sccc", kills = 10, deaths = 10, towerkills = 15)
card_miracle <- list(player = "miracle", CS = 20, GPM = 15, roshkills = 15)
comparecards(card_sumail, card_matumba, fantasydata, players)
comparecards(card_sumail, card_burning, fantasydata, players)
comparecards(card_sumail, card_Moogy, fantasydata, players)
comparecards(card_sumail, card_rtz, fantasydata, players)
comparecards(card_sumail, card_op, fantasydata, players)
comparecards(card_sumail, card_sccc, fantasydata, players)
comparecards(card_sumail, card_miracle, fantasydata, players)
test <- list()
test
test$test <- 5
test
test$other <- "wtf man"
test
rm(test)
?as.list
?args
?environment
makecard <- function(player, kills, deaths, CS, GPM, towerkills, roshkills,
teamfight, wards, stacks, runes, firstblood, stuns){
if(missing(player)){stop("No player")}
argg <- as.list(environment())
card <- list(player <- player)
print(argg)
}
makecard("sumail", GPM = 10, teamfight = 20)
?is.null
makecard <- function(player, kills, deaths, CS, GPM, towerkills, roshkills,
teamfight, wards, stacks, runes, firstblood, stuns){
if(missing(player)){stop("No player")}
argg <- as.list(environment())
for(arg in argg){
if(!is.null(arg)){
card$deparse(substitute(arg)) <- arg
}
}
return(card)
}
makecard("SumaiL", CS = 10, towerkills = 20, teamfight = 20)
makecard <- function(player, kills, deaths, CS, GPM, towerkills, roshkills,
teamfight, wards, stacks, runes, firstblood, stuns){
if(missing(player)){stop("No player")}
argg <- as.list(environment())
for(arg in argg){
if(!is.null(arg)){
card[[deparse(substitute(arg))]] <- arg
}
}
return(card)
}
makecard("SumaiL", CS = 10, towerkills = 20, teamfight = 20)
makecard <- function(player, kills, deaths, CS, GPM, towerkills, roshkills,
teamfight, wards, stacks, runes, firstblood, stuns){
if(missing(player)){stop("No player")}
argg <- as.list(environment())
card <- list()
for(arg in argg){
if(!is.null(arg)){
card[[deparse(substitute(arg))]] <- arg
}
}
return(card)
}
makecard("SumaiL", CS = 10, towerkills = 20, teamfight = 20)
names(card_sccc)
makecard <- function(player, kills, deaths, CS, GPM, towerkills, roshkills,
teamfight, wards, stacks, runes, firstblood, stuns){
if(missing(player)){stop("No player")}
argg <- as.list(environment())
card <- list()
for(stat in names(argg)){
if(!is.null(arg)){
card[[stat]] <- argg[[stat]]
}
}
return(card)
}
names(card_sccc)
makecard("SumaiL", CS = 10, towerkills = 20, teamfight = 20)
makecard <- function(player, kills, deaths, CS, GPM, towerkills, roshkills,
teamfight, wards, stacks, runes, firstblood, stuns){
if(missing(player)){stop("No player")}
argg <- as.list(environment())
card <- list()
for(stat in names(argg)){
if(!is.null(argg[[stat]])){
card[[stat]] <- argg[[stat]]
}
}
return(card)
}
makecard("SumaiL", CS = 10, towerkills = 20, teamfight = 20)
makecard <- function(player, kills, deaths, CS, GPM, towerkills, roshkills,
teamfight, wards, stacks, runes, firstblood, stuns){
if(missing(player)){stop("No player")}
argg <- as.list(environment())
card <- list()
for(stat in names(argg)){
if(!is.null(argg[[stat]])){
card[[stat]] <- argg[[stat]]
}
}
print(summary(card))
#return(card)
}
makecard("SumaiL", CS = 10, towerkills = 20, teamfight = 20)
makecard <- function(player, kills, deaths, CS, GPM, towerkills, roshkills,
teamfight, wards, stacks, runes, firstblood, stuns){
if(missing(player)){stop("No player")}
argg <- as.list(environment())
card <- list()
for(stat in names(argg)){
if(argg[[stat]] > 0){
card[[stat]] <- argg[[stat]]
}
}
return(card)
}
makecard("SumaiL", CS = 10, towerkills = 20, teamfight = 20)
card_uni <- makecard("Universe", kills = 5, deaths = 15, CS = 5, GPM = 10, firstblood = 15)
card_mindcontrol <- makecard("Mind_Control", deaths = 15, CS = 15, towerkills = 5, teamfight = 10, stuns = 10)
card_xxs <- makecard("Xxs", deaths = 10, GPM = 5, stuns = 10)
card_kpii <- makecard("kpii", roshkills = 20, runes = 25, stuns = 15)
comparecards(card_uni, card_mindcontrol, fantasydata, players)
comparecards(card_uni, card_xxs, fantasydata, players)
comparecards(card_uni, card_kpii, fantasydata, players)
card_crit <- makecard("Cr1t-", deaths = 15, towerkills = 15, wards = 10, stacks = 15, stuns = 20)
card_zai <- makecard("zai", towerkills = 15, stacks = 25, runes = 5)
card_boboka <- makecard("BoBoKa", kills = 10, firstblood = 10, stuns = 20)
card_faith <- makecard("Faith", roshkills = 25, firstblood = 15, stuns = 10)
card_kaka <- makecard("kaka", kills = 15, roshkills = 15, firstblood = 10)
card_kuro <- makecard("KuroKy", towerkills = 10, teamfight = 20, firstblood = 5)
card_q <- makecard("Q")
card_gh <- makecard("Gh")
card_super <- makecard("super")
rm(card_super)
comparecards(card_crit, card_zai, fantasydata, players)
comparecards(card_crit, card_boboka, fantasydata, players)
comparecards(card_crit, card_faith, fantasydata, players)
comparecards(card_crit, card_kaka, fantasydata, players)
comparecards(card_crit, card_kuro, fantasydata, players)
comparecards(card_crit, card_q, fantasydata, players)
comparecards(card_crit, card_gh, fantasydata, players)
cardscores <- function(card, data, players){
ID <- getplayerinfo(card$player, players)$account_id
playerdata <- filter(data, playerID == ID)
#print(summary(playerdata))
if(length(card) = 1){
return(playerdata)
}
for(i in seq(2, length(card), 1)){
#print(names(card)[[i]])
playerdata[,names(card)[i]] <- playerdata[,names(card)[[i]]] * (1 + (card[[i]]/100))
}
playerdata$total <- rowSums(playerdata[3:14])
return(playerdata)
}
cardscores <- function(card, data, players){
ID <- getplayerinfo(card$player, players)$account_id
playerdata <- filter(data, playerID == ID)
#print(summary(playerdata))
if(length(card) = 1){
return(playerdata)
}
for(i in seq(2, length(card), 1)){
#print(names(card)[[i]])
playerdata[,names(card)[i]] <- playerdata[,names(card)[[i]]] * (1 + (card[[i]]/100))
}
playerdata$total <- rowSums(playerdata[3:14])
return(playerdata)
}
cardscores <- function(card, data, players){
ID <- getplayerinfo(card$player, players)$account_id
playerdata <- filter(data, playerID == ID)
#print(summary(playerdata))
if(length(card) == 1){
return(playerdata)
}
for(i in seq(2, length(card), 1)){
#print(names(card)[[i]])
playerdata[,names(card)[i]] <- playerdata[,names(card)[[i]]] * (1 + (card[[i]]/100))
}
playerdata$total <- rowSums(playerdata[3:14])
return(playerdata)
}
comparecards(card_crit, card_q, fantasydata, players)
comparecards(card_crit, card_gh, fantasydata, players)
comparecards(card_crit, card_zai, fantasydata, players)
comparecards(card_crit, card_boboka, fantasydata, players)
comparecards(card_crit, card_faith, fantasydata, players)
comparecards(card_crit, card_kaka, fantasydata, players)
comparecards(card_crit, card_kuro, fantasydata, players)
comparecards(card_crit, card_q, fantasydata, players)
comparecards(card_crit, card_gh, fantasydata, players)
